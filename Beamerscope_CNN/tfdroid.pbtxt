node {
  name: "random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\t\000\000\000\t\000\000\000\002\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal/mul"
  op: "Mul"
  input: "random_normal/RandomStandardNormal"
  input: "random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal"
  op: "Add"
  input: "random_normal/mul"
  input: "random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wc1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 9
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wc1/Assign"
  op: "Assign"
  input: "wc1"
  input: "random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wc1/read"
  op: "Identity"
  input: "wc1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
}
node {
  name: "random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_1/mul"
  op: "Mul"
  input: "random_normal_1/RandomStandardNormal"
  input: "random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_1"
  op: "Add"
  input: "random_normal_1/mul"
  input: "random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wc2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wc2/Assign"
  op: "Assign"
  input: "wc2"
  input: "random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wc2/read"
  op: "Identity"
  input: "wc2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
}
node {
  name: "random_normal_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "random_normal_2/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_2/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_2/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_2/mul"
  op: "Mul"
  input: "random_normal_2/RandomStandardNormal"
  input: "random_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_2"
  op: "Add"
  input: "random_normal_2/mul"
  input: "random_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wd1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 131072
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wd1/Assign"
  op: "Assign"
  input: "wd1"
  input: "random_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wd1/read"
  op: "Identity"
  input: "wd1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
}
node {
  name: "random_normal_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "random_normal_3/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_3/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_3/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_3/mul"
  op: "Mul"
  input: "random_normal_3/RandomStandardNormal"
  input: "random_normal_3/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_3"
  op: "Add"
  input: "random_normal_3/mul"
  input: "random_normal_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wout"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wout/Assign"
  op: "Assign"
  input: "wout"
  input: "random_normal_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wout/read"
  op: "Identity"
  input: "wout"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
}
node {
  name: "random_normal_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "random_normal_4/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_4/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_4/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_4/mul"
  op: "Mul"
  input: "random_normal_4/RandomStandardNormal"
  input: "random_normal_4/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_4"
  op: "Add"
  input: "random_normal_4/mul"
  input: "random_normal_4/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bc1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bc1/Assign"
  op: "Assign"
  input: "bc1"
  input: "random_normal_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bc1/read"
  op: "Identity"
  input: "bc1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "random_normal_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "random_normal_5/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_5/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_5/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_5/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_5/mul"
  op: "Mul"
  input: "random_normal_5/RandomStandardNormal"
  input: "random_normal_5/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_5"
  op: "Add"
  input: "random_normal_5/mul"
  input: "random_normal_5/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bc2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bc2/Assign"
  op: "Assign"
  input: "bc2"
  input: "random_normal_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bc2/read"
  op: "Identity"
  input: "bc2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
}
node {
  name: "random_normal_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "random_normal_6/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_6/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_6/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_6/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_6/mul"
  op: "Mul"
  input: "random_normal_6/RandomStandardNormal"
  input: "random_normal_6/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_6"
  op: "Add"
  input: "random_normal_6/mul"
  input: "random_normal_6/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bd1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bd1/Assign"
  op: "Assign"
  input: "bd1"
  input: "random_normal_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bd1/read"
  op: "Identity"
  input: "bd1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
}
node {
  name: "random_normal_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "random_normal_7/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "random_normal_7/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "random_normal_7/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "random_normal_7/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "random_normal_7/mul"
  op: "Mul"
  input: "random_normal_7/RandomStandardNormal"
  input: "random_normal_7/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "random_normal_7"
  op: "Add"
  input: "random_normal_7/mul"
  input: "random_normal_7/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bout"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bout/Assign"
  op: "Assign"
  input: "bout"
  input: "random_normal_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bout/read"
  op: "Identity"
  input: "bout"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
}
node {
  name: "input/input_r"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "input/yin"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 48
        }
      }
    }
  }
}
node {
  name: "input/dropout-factor"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "input/phase_train"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "conv_1/conv2d"
  op: "Conv2D"
  input: "input/input_r"
  input: "wc1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/BiasAdd"
  op: "BiasAdd"
  input: "conv_1/conv2d"
  input: "bc1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv_1/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization/beta/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization/beta"
  input: "conv_1/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization/beta/read"
  op: "Identity"
  input: "conv_1/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/beta"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization/gamma"
  input: "conv_1/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization/gamma/read"
  op: "Identity"
  input: "conv_1/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization/moving_mean"
  input: "conv_1/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "conv_1/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization/moving_variance"
  input: "conv_1/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "conv_1/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/mean"
  op: "Mean"
  input: "conv_1/BiasAdd"
  input: "conv_1/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "conv_1/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "conv_1/BiasAdd"
  input: "conv_1/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/variance"
  op: "Mean"
  input: "conv_1/batch_normalization/moments/SquaredDifference"
  input: "conv_1/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "conv_1/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "conv_1/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "conv_1/batch_normalization/moving_mean/read"
  input: "conv_1/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "conv_1/batch_normalization/AssignMovingAvg/sub"
  input: "conv_1/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "conv_1/batch_normalization/moving_mean"
  input: "conv_1/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "conv_1/batch_normalization/moving_variance/read"
  input: "conv_1/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "conv_1/batch_normalization/AssignMovingAvg_1/sub"
  input: "conv_1/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv_1/batch_normalization/moving_variance"
  input: "conv_1/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/add"
  op: "Add"
  input: "conv_1/batch_normalization/moments/Squeeze_1"
  input: "conv_1/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv_1/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "conv_1/batch_normalization/batchnorm/Rsqrt"
  input: "conv_1/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "conv_1/BiasAdd"
  input: "conv_1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "conv_1/batch_normalization/moments/Squeeze"
  input: "conv_1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "conv_1/batch_normalization/beta/read"
  input: "conv_1/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "conv_1/batch_normalization/batchnorm/mul_1"
  input: "conv_1/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/beta"
  input: "conv_1/batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/gamma"
  input: "conv_1/batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/moving_mean"
  input: "conv_1/batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/moving_variance"
  input: "conv_1/batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/add"
  op: "Add"
  input: "conv_1/batch_normalization_1/moving_variance/read"
  input: "conv_1/batch_normalization_2/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv_1/batch_normalization_2/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/mul"
  op: "Mul"
  input: "conv_1/batch_normalization_2/batchnorm/Rsqrt"
  input: "conv_1/batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/mul_1"
  op: "Mul"
  input: "conv_1/BiasAdd"
  input: "conv_1/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/mul_2"
  op: "Mul"
  input: "conv_1/batch_normalization_1/moving_mean/read"
  input: "conv_1/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/sub"
  op: "Sub"
  input: "conv_1/batch_normalization_1/beta/read"
  input: "conv_1/batch_normalization_2/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_2/batchnorm/add_1"
  op: "Add"
  input: "conv_1/batch_normalization_2/batchnorm/mul_1"
  input: "conv_1/batch_normalization_2/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/Tanh"
  op: "Tanh"
  input: "conv_1/batch_normalization_2/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/MaxPool"
  op: "MaxPool"
  input: "conv_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv_2/conv2d"
  op: "Conv2D"
  input: "conv_1/MaxPool"
  input: "wc2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/BiasAdd"
  op: "BiasAdd"
  input: "conv_2/conv2d"
  input: "bc2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization/beta/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization/beta"
  input: "conv_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization/beta/read"
  op: "Identity"
  input: "conv_2/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/beta"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization/gamma"
  input: "conv_2/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization/gamma/read"
  op: "Identity"
  input: "conv_2/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization/moving_mean"
  input: "conv_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "conv_2/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization/moving_variance"
  input: "conv_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "conv_2/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/mean"
  op: "Mean"
  input: "conv_2/BiasAdd"
  input: "conv_2/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "conv_2/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "conv_2/BiasAdd"
  input: "conv_2/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/variance"
  op: "Mean"
  input: "conv_2/batch_normalization/moments/SquaredDifference"
  input: "conv_2/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "conv_2/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "conv_2/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "conv_2/batch_normalization/moving_mean/read"
  input: "conv_2/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "conv_2/batch_normalization/AssignMovingAvg/sub"
  input: "conv_2/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "conv_2/batch_normalization/moving_mean"
  input: "conv_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "conv_2/batch_normalization/moving_variance/read"
  input: "conv_2/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "conv_2/batch_normalization/AssignMovingAvg_1/sub"
  input: "conv_2/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv_2/batch_normalization/moving_variance"
  input: "conv_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/add"
  op: "Add"
  input: "conv_2/batch_normalization/moments/Squeeze_1"
  input: "conv_2/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv_2/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "conv_2/batch_normalization/batchnorm/Rsqrt"
  input: "conv_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "conv_2/BiasAdd"
  input: "conv_2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "conv_2/batch_normalization/moments/Squeeze"
  input: "conv_2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "conv_2/batch_normalization/beta/read"
  input: "conv_2/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "conv_2/batch_normalization/batchnorm/mul_1"
  input: "conv_2/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/beta"
  input: "conv_2/batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/gamma"
  input: "conv_2/batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/moving_mean"
  input: "conv_2/batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/moving_variance"
  input: "conv_2/batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/add"
  op: "Add"
  input: "conv_2/batch_normalization_1/moving_variance/read"
  input: "conv_2/batch_normalization_2/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv_2/batch_normalization_2/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/mul"
  op: "Mul"
  input: "conv_2/batch_normalization_2/batchnorm/Rsqrt"
  input: "conv_2/batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/mul_1"
  op: "Mul"
  input: "conv_2/BiasAdd"
  input: "conv_2/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/mul_2"
  op: "Mul"
  input: "conv_2/batch_normalization_1/moving_mean/read"
  input: "conv_2/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/sub"
  op: "Sub"
  input: "conv_2/batch_normalization_1/beta/read"
  input: "conv_2/batch_normalization_2/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_2/batchnorm/add_1"
  op: "Add"
  input: "conv_2/batch_normalization_2/batchnorm/mul_1"
  input: "conv_2/batch_normalization_2/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/Tanh"
  op: "Tanh"
  input: "conv_2/batch_normalization_2/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/MaxPool"
  op: "MaxPool"
  input: "conv_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "fc1_reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\000\002\000"
      }
    }
  }
}
node {
  name: "fc1_reshape"
  op: "Reshape"
  input: "conv_2/MaxPool"
  input: "fc1_reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MatMul"
  op: "MatMul"
  input: "fc1_reshape"
  input: "wd1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Add"
  op: "Add"
  input: "MatMul"
  input: "bd1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Tanh"
  op: "Tanh"
  input: "Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/Shape"
  op: "Shape"
  input: "Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout/random_uniform/max"
  input: "dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout/random_uniform/RandomUniform"
  input: "dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/random_uniform"
  op: "Add"
  input: "dropout/random_uniform/mul"
  input: "dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/add"
  op: "Add"
  input: "input/dropout-factor"
  input: "dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/Floor"
  op: "Floor"
  input: "dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/div"
  op: "RealDiv"
  input: "Tanh"
  input: "input/dropout-factor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout/mul"
  op: "Mul"
  input: "dropout/div"
  input: "dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MatMul_1"
  op: "MatMul"
  input: "dropout/mul"
  input: "wout/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output"
  op: "Add"
  input: "MatMul_1"
  input: "bout/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/sub"
  op: "Sub"
  input: "output"
  input: "input/yin"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/Square"
  op: "Square"
  input: "cost-node/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cost-node/Mean"
  op: "Mean"
  input: "cost-node/Square"
  input: "cost-node/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "cost-node/gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "cost-node/gradients/Fill"
  op: "Fill"
  input: "cost-node/gradients/Shape"
  input: "cost-node/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/Fill"
  input: "cost-node/gradients/cost-node/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Shape"
  op: "Shape"
  input: "cost-node/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Tile"
  op: "Tile"
  input: "cost-node/gradients/cost-node/Mean_grad/Reshape"
  input: "cost-node/gradients/cost-node/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Shape_1"
  op: "Shape"
  input: "cost-node/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Prod"
  op: "Prod"
  input: "cost-node/gradients/cost-node/Mean_grad/Shape_1"
  input: "cost-node/gradients/cost-node/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Prod_1"
  op: "Prod"
  input: "cost-node/gradients/cost-node/Mean_grad/Shape_2"
  input: "cost-node/gradients/cost-node/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Maximum"
  op: "Maximum"
  input: "cost-node/gradients/cost-node/Mean_grad/Prod_1"
  input: "cost-node/gradients/cost-node/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "cost-node/gradients/cost-node/Mean_grad/Prod"
  input: "cost-node/gradients/cost-node/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/Cast"
  op: "Cast"
  input: "cost-node/gradients/cost-node/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Mean_grad/truediv"
  op: "RealDiv"
  input: "cost-node/gradients/cost-node/Mean_grad/Tile"
  input: "cost-node/gradients/cost-node/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Square_grad/mul/x"
  op: "Const"
  input: "^cost-node/gradients/cost-node/Mean_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Square_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/cost-node/Square_grad/mul/x"
  input: "cost-node/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/Square_grad/mul_1"
  op: "Mul"
  input: "cost-node/gradients/cost-node/Mean_grad/truediv"
  input: "cost-node/gradients/cost-node/Square_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Shape"
  op: "Shape"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Shape_1"
  op: "Shape"
  input: "input/yin"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/cost-node/sub_grad/Shape"
  input: "cost-node/gradients/cost-node/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/cost-node/Square_grad/mul_1"
  input: "cost-node/gradients/cost-node/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/cost-node/sub_grad/Sum"
  input: "cost-node/gradients/cost-node/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/cost-node/Square_grad/mul_1"
  input: "cost-node/gradients/cost-node/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Neg"
  op: "Neg"
  input: "cost-node/gradients/cost-node/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/cost-node/sub_grad/Neg"
  input: "cost-node/gradients/cost-node/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/cost-node/sub_grad/Reshape"
  input: "^cost-node/gradients/cost-node/sub_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/cost-node/sub_grad/Reshape"
  input: "^cost-node/gradients/cost-node/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/cost-node/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/cost-node/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/cost-node/sub_grad/Reshape_1"
  input: "^cost-node/gradients/cost-node/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/cost-node/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/Shape"
  op: "Shape"
  input: "MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/output_grad/Shape"
  input: "cost-node/gradients/output_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/cost-node/sub_grad/tuple/control_dependency"
  input: "cost-node/gradients/output_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/output_grad/Sum"
  input: "cost-node/gradients/output_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/cost-node/sub_grad/tuple/control_dependency"
  input: "cost-node/gradients/output_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/output_grad/Sum_1"
  input: "cost-node/gradients/output_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/output_grad/Reshape"
  input: "^cost-node/gradients/output_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/output_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/output_grad/Reshape"
  input: "^cost-node/gradients/output_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/output_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/output_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/output_grad/Reshape_1"
  input: "^cost-node/gradients/output_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/output_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "cost-node/gradients/output_grad/tuple/control_dependency"
  input: "wout/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "dropout/mul"
  input: "cost-node/gradients/output_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/MatMul_1_grad/MatMul"
  input: "^cost-node/gradients/MatMul_1_grad/MatMul_1"
}
node {
  name: "cost-node/gradients/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/MatMul_1_grad/MatMul"
  input: "^cost-node/gradients/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/MatMul_1_grad/MatMul"
      }
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/MatMul_1_grad/MatMul_1"
  input: "^cost-node/gradients/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/MatMul_1_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/dropout/mul_grad/Shape"
  input: "cost-node/gradients/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/MatMul_1_grad/tuple/control_dependency"
  input: "dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/dropout/mul_grad/mul"
  input: "cost-node/gradients/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/dropout/mul_grad/Sum"
  input: "cost-node/gradients/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "dropout/div"
  input: "cost-node/gradients/MatMul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/dropout/mul_grad/mul_1"
  input: "cost-node/gradients/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/dropout/mul_grad/Sum_1"
  input: "cost-node/gradients/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/dropout/mul_grad/Reshape"
  input: "^cost-node/gradients/dropout/mul_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/dropout/mul_grad/Reshape"
  input: "^cost-node/gradients/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/dropout/mul_grad/Reshape_1"
  input: "^cost-node/gradients/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Shape"
  op: "Shape"
  input: "Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Shape_1"
  op: "Shape"
  input: "input/dropout-factor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/dropout/div_grad/Shape"
  input: "cost-node/gradients/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "cost-node/gradients/dropout/mul_grad/tuple/control_dependency"
  input: "input/dropout-factor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/dropout/div_grad/RealDiv"
  input: "cost-node/gradients/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/dropout/div_grad/Sum"
  input: "cost-node/gradients/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Neg"
  op: "Neg"
  input: "Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "cost-node/gradients/dropout/div_grad/Neg"
  input: "input/dropout-factor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "cost-node/gradients/dropout/div_grad/RealDiv_1"
  input: "input/dropout-factor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/dropout/mul_grad/tuple/control_dependency"
  input: "cost-node/gradients/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/dropout/div_grad/mul"
  input: "cost-node/gradients/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/dropout/div_grad/Sum_1"
  input: "cost-node/gradients/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/dropout/div_grad/Reshape"
  input: "^cost-node/gradients/dropout/div_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/dropout/div_grad/Reshape"
  input: "^cost-node/gradients/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/dropout/div_grad/Reshape_1"
  input: "^cost-node/gradients/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Tanh"
  input: "cost-node/gradients/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/Shape"
  op: "Shape"
  input: "MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/Add_grad/Shape"
  input: "cost-node/gradients/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/Tanh_grad/TanhGrad"
  input: "cost-node/gradients/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/Add_grad/Sum"
  input: "cost-node/gradients/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/Tanh_grad/TanhGrad"
  input: "cost-node/gradients/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/Add_grad/Sum_1"
  input: "cost-node/gradients/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/Add_grad/Reshape"
  input: "^cost-node/gradients/Add_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/Add_grad/Reshape"
  input: "^cost-node/gradients/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/Add_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/Add_grad/Reshape_1"
  input: "^cost-node/gradients/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/Add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_grad/MatMul"
  op: "MatMul"
  input: "cost-node/gradients/Add_grad/tuple/control_dependency"
  input: "wd1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc1_reshape"
  input: "cost-node/gradients/Add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/MatMul_grad/MatMul"
  input: "^cost-node/gradients/MatMul_grad/MatMul_1"
}
node {
  name: "cost-node/gradients/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/MatMul_grad/MatMul"
  input: "^cost-node/gradients/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "cost-node/gradients/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/MatMul_grad/MatMul_1"
  input: "^cost-node/gradients/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/fc1_reshape_grad/Shape"
  op: "Shape"
  input: "conv_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/fc1_reshape_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/MatMul_grad/tuple/control_dependency"
  input: "cost-node/gradients/fc1_reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv_2/Tanh"
  input: "conv_2/MaxPool"
  input: "cost-node/gradients/fc1_reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "conv_2/Tanh"
  input: "cost-node/gradients/conv_2/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "conv_2/batch_normalization_2/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Shape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_2/Tanh_grad/TanhGrad"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_2/Tanh_grad/TanhGrad"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Sum_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "conv_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  input: "conv_2/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/mul"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "conv_2/BiasAdd"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/mul_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Sum_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Shape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Neg"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "^cost-node/gradients/conv_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "cost-node/gradients/conv_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "^cost-node/gradients/conv_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/BiasAdd_grad/BiasAddGrad"
  input: "^cost-node/gradients/conv_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Shape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "conv_2/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/mul"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/mul_1"
  op: "Mul"
  input: "conv_2/batch_normalization_1/moving_mean/read"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/mul_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Sum_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/Shape"
  op: "Shape"
  input: "conv_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "cost-node/gradients/conv_2/conv2d_grad/Shape"
  input: "wc2/read"
  input: "cost-node/gradients/conv_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\007\000\000\000\007\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv_1/MaxPool"
  input: "cost-node/gradients/conv_2/conv2d_grad/Shape_1"
  input: "cost-node/gradients/conv_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropInput"
  input: "^cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropFilter"
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropInput"
  input: "^cost-node/gradients/conv_2/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/conv2d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropFilter"
  input: "^cost-node/gradients/conv_2/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/conv2d_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "cost-node/gradients/AddN"
  op: "AddN"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Shape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/AddN"
  input: "conv_2/batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/mul"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "conv_2/batch_normalization_2/batchnorm/Rsqrt"
  input: "cost-node/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/mul_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Sum_1"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
  input: "^cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv_1/Tanh"
  input: "conv_1/MaxPool"
  input: "cost-node/gradients/conv_2/conv2d_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "conv_1/Tanh"
  input: "cost-node/gradients/conv_1/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "conv_1/batch_normalization_2/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Shape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_1/Tanh_grad/TanhGrad"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_1/Tanh_grad/TanhGrad"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Sum_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "conv_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  input: "conv_1/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/mul"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "conv_1/BiasAdd"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/mul_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Sum_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Shape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Neg"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "^cost-node/gradients/conv_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "cost-node/gradients/conv_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "^cost-node/gradients/conv_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/BiasAdd_grad/BiasAddGrad"
  input: "^cost-node/gradients/conv_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Shape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "conv_1/batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/mul"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/mul_1"
  op: "Mul"
  input: "conv_1/batch_normalization_1/moving_mean/read"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/mul_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Sum_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/Shape"
  op: "Shape"
  input: "input/input_r"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "cost-node/gradients/conv_1/conv2d_grad/Shape"
  input: "wc1/read"
  input: "cost-node/gradients/conv_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\t\000\000\000\t\000\000\000\002\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "input/input_r"
  input: "cost-node/gradients/conv_1/conv2d_grad/Shape_1"
  input: "cost-node/gradients/conv_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropInput"
  input: "^cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropFilter"
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropInput"
  input: "^cost-node/gradients/conv_1/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/conv2d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropFilter"
  input: "^cost-node/gradients/conv_1/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/conv2d_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "cost-node/gradients/AddN_1"
  op: "AddN"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Shape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "cost-node/gradients/AddN_1"
  input: "conv_1/batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/mul"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "conv_1/batch_normalization_2/batchnorm/Rsqrt"
  input: "cost-node/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/mul_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Sum_1"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
  input: "^cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "cost-node/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "cost-node/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "cost-node/beta1_power/Assign"
  op: "Assign"
  input: "cost-node/beta1_power"
  input: "cost-node/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/beta1_power/read"
  op: "Identity"
  input: "cost-node/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "cost-node/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "cost-node/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "cost-node/beta2_power/Assign"
  op: "Assign"
  input: "cost-node/beta2_power"
  input: "cost-node/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/beta2_power/read"
  op: "Identity"
  input: "cost-node/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "wc1/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 9
          }
          dim {
            size: 2
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wc1/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 9
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wc1/Adam/Assign"
  op: "Assign"
  input: "wc1/Adam"
  input: "wc1/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wc1/Adam/read"
  op: "Identity"
  input: "wc1/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
}
node {
  name: "wc1/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 9
          }
          dim {
            size: 2
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wc1/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 9
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wc1/Adam_1/Assign"
  op: "Assign"
  input: "wc1/Adam_1"
  input: "wc1/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wc1/Adam_1/read"
  op: "Identity"
  input: "wc1/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
}
node {
  name: "wc2/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wc2/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wc2/Adam/Assign"
  op: "Assign"
  input: "wc2/Adam"
  input: "wc2/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wc2/Adam/read"
  op: "Identity"
  input: "wc2/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
}
node {
  name: "wc2/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 7
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wc2/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 7
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wc2/Adam_1/Assign"
  op: "Assign"
  input: "wc2/Adam_1"
  input: "wc2/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wc2/Adam_1/read"
  op: "Identity"
  input: "wc2/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
}
node {
  name: "wd1/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 131072
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wd1/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 131072
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wd1/Adam/Assign"
  op: "Assign"
  input: "wd1/Adam"
  input: "wd1/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wd1/Adam/read"
  op: "Identity"
  input: "wd1/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
}
node {
  name: "wd1/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 131072
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wd1/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 131072
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wd1/Adam_1/Assign"
  op: "Assign"
  input: "wd1/Adam_1"
  input: "wd1/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wd1/Adam_1/read"
  op: "Identity"
  input: "wd1/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
}
node {
  name: "wout/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wout/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wout/Adam/Assign"
  op: "Assign"
  input: "wout/Adam"
  input: "wout/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wout/Adam/read"
  op: "Identity"
  input: "wout/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
}
node {
  name: "wout/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "wout/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "wout/Adam_1/Assign"
  op: "Assign"
  input: "wout/Adam_1"
  input: "wout/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "wout/Adam_1/read"
  op: "Identity"
  input: "wout/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
}
node {
  name: "bc1/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bc1/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bc1/Adam/Assign"
  op: "Assign"
  input: "bc1/Adam"
  input: "bc1/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bc1/Adam/read"
  op: "Identity"
  input: "bc1/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "bc1/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bc1/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bc1/Adam_1/Assign"
  op: "Assign"
  input: "bc1/Adam_1"
  input: "bc1/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bc1/Adam_1/read"
  op: "Identity"
  input: "bc1/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "bc2/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bc2/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bc2/Adam/Assign"
  op: "Assign"
  input: "bc2/Adam"
  input: "bc2/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bc2/Adam/read"
  op: "Identity"
  input: "bc2/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
}
node {
  name: "bc2/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bc2/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bc2/Adam_1/Assign"
  op: "Assign"
  input: "bc2/Adam_1"
  input: "bc2/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bc2/Adam_1/read"
  op: "Identity"
  input: "bc2/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
}
node {
  name: "bd1/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bd1/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bd1/Adam/Assign"
  op: "Assign"
  input: "bd1/Adam"
  input: "bd1/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bd1/Adam/read"
  op: "Identity"
  input: "bd1/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
}
node {
  name: "bd1/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bd1/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bd1/Adam_1/Assign"
  op: "Assign"
  input: "bd1/Adam_1"
  input: "bd1/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bd1/Adam_1/read"
  op: "Identity"
  input: "bd1/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
}
node {
  name: "bout/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bout/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bout/Adam/Assign"
  op: "Assign"
  input: "bout/Adam"
  input: "bout/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bout/Adam/read"
  op: "Identity"
  input: "bout/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
}
node {
  name: "bout/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bout/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bout/Adam_1/Assign"
  op: "Assign"
  input: "bout/Adam_1"
  input: "bout/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bout/Adam_1/read"
  op: "Identity"
  input: "bout/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/beta/Adam"
  input: "conv_1/batch_normalization_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/beta/Adam_1"
  input: "conv_1/batch_normalization_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta/Adam_1/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/gamma/Adam"
  input: "conv_1/batch_normalization_1/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam_1/Assign"
  op: "Assign"
  input: "conv_1/batch_normalization_1/gamma/Adam_1"
  input: "conv_1/batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma/Adam_1/read"
  op: "Identity"
  input: "conv_1/batch_normalization_1/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/beta/Adam"
  input: "conv_2/batch_normalization_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/beta/Adam_1"
  input: "conv_2/batch_normalization_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta/Adam_1/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/gamma/Adam"
  input: "conv_2/batch_normalization_1/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam_1/Assign"
  op: "Assign"
  input: "conv_2/batch_normalization_1/gamma/Adam_1"
  input: "conv_2/batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma/Adam_1/read"
  op: "Identity"
  input: "conv_2/batch_normalization_1/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "cost-node/Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "cost-node/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "cost-node/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "cost-node/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "cost-node/Adam/update_wc1/ApplyAdam"
  op: "ApplyAdam"
  input: "wc1"
  input: "wc1/Adam"
  input: "wc1/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_1/conv2d_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_wc2/ApplyAdam"
  op: "ApplyAdam"
  input: "wc2"
  input: "wc2/Adam"
  input: "wc2/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_2/conv2d_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_wd1/ApplyAdam"
  op: "ApplyAdam"
  input: "wd1"
  input: "wd1/Adam"
  input: "wd1/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_wout/ApplyAdam"
  op: "ApplyAdam"
  input: "wout"
  input: "wout/Adam"
  input: "wout/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@wout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_bc1/ApplyAdam"
  op: "ApplyAdam"
  input: "bc1"
  input: "bc1/Adam"
  input: "bc1/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_bc2/ApplyAdam"
  op: "ApplyAdam"
  input: "bc2"
  input: "bc2/Adam"
  input: "bc2/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_bd1/ApplyAdam"
  op: "ApplyAdam"
  input: "bd1"
  input: "bd1/Adam"
  input: "bd1/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/Add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bd1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_bout/ApplyAdam"
  op: "ApplyAdam"
  input: "bout"
  input: "bout/Adam"
  input: "bout/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/output_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bout"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_conv_1/batch_normalization_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "conv_1/batch_normalization_1/beta"
  input: "conv_1/batch_normalization_1/beta/Adam"
  input: "conv_1/batch_normalization_1/beta/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_conv_1/batch_normalization_1/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "conv_1/batch_normalization_1/gamma"
  input: "conv_1/batch_normalization_1/gamma/Adam"
  input: "conv_1/batch_normalization_1/gamma/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_1/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_1/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_conv_2/batch_normalization_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "conv_2/batch_normalization_1/beta"
  input: "conv_2/batch_normalization_1/beta/Adam"
  input: "conv_2/batch_normalization_1/beta/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/update_conv_2/batch_normalization_1/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "conv_2/batch_normalization_1/gamma"
  input: "conv_2/batch_normalization_1/gamma/Adam"
  input: "conv_2/batch_normalization_1/gamma/Adam_1"
  input: "cost-node/beta1_power/read"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/learning_rate"
  input: "cost-node/Adam/beta1"
  input: "cost-node/Adam/beta2"
  input: "cost-node/Adam/epsilon"
  input: "cost-node/gradients/conv_2/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv_2/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "cost-node/Adam/mul"
  op: "Mul"
  input: "cost-node/beta1_power/read"
  input: "cost-node/Adam/beta1"
  input: "^cost-node/Adam/update_wc1/ApplyAdam"
  input: "^cost-node/Adam/update_wc2/ApplyAdam"
  input: "^cost-node/Adam/update_wd1/ApplyAdam"
  input: "^cost-node/Adam/update_wout/ApplyAdam"
  input: "^cost-node/Adam/update_bc1/ApplyAdam"
  input: "^cost-node/Adam/update_bc2/ApplyAdam"
  input: "^cost-node/Adam/update_bd1/ApplyAdam"
  input: "^cost-node/Adam/update_bout/ApplyAdam"
  input: "^cost-node/Adam/update_conv_1/batch_normalization_1/beta/ApplyAdam"
  input: "^cost-node/Adam/update_conv_1/batch_normalization_1/gamma/ApplyAdam"
  input: "^cost-node/Adam/update_conv_2/batch_normalization_1/beta/ApplyAdam"
  input: "^cost-node/Adam/update_conv_2/batch_normalization_1/gamma/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "cost-node/Adam/Assign"
  op: "Assign"
  input: "cost-node/beta1_power"
  input: "cost-node/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/Adam/mul_1"
  op: "Mul"
  input: "cost-node/beta2_power/read"
  input: "cost-node/Adam/beta2"
  input: "^cost-node/Adam/update_wc1/ApplyAdam"
  input: "^cost-node/Adam/update_wc2/ApplyAdam"
  input: "^cost-node/Adam/update_wd1/ApplyAdam"
  input: "^cost-node/Adam/update_wout/ApplyAdam"
  input: "^cost-node/Adam/update_bc1/ApplyAdam"
  input: "^cost-node/Adam/update_bc2/ApplyAdam"
  input: "^cost-node/Adam/update_bd1/ApplyAdam"
  input: "^cost-node/Adam/update_bout/ApplyAdam"
  input: "^cost-node/Adam/update_conv_1/batch_normalization_1/beta/ApplyAdam"
  input: "^cost-node/Adam/update_conv_1/batch_normalization_1/gamma/ApplyAdam"
  input: "^cost-node/Adam/update_conv_2/batch_normalization_1/beta/ApplyAdam"
  input: "^cost-node/Adam/update_conv_2/batch_normalization_1/gamma/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
}
node {
  name: "cost-node/Adam/Assign_1"
  op: "Assign"
  input: "cost-node/beta2_power"
  input: "cost-node/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bc1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cost-node/Adam"
  op: "NoOp"
  input: "^cost-node/Adam/update_wc1/ApplyAdam"
  input: "^cost-node/Adam/update_wc2/ApplyAdam"
  input: "^cost-node/Adam/update_wd1/ApplyAdam"
  input: "^cost-node/Adam/update_wout/ApplyAdam"
  input: "^cost-node/Adam/update_bc1/ApplyAdam"
  input: "^cost-node/Adam/update_bc2/ApplyAdam"
  input: "^cost-node/Adam/update_bd1/ApplyAdam"
  input: "^cost-node/Adam/update_bout/ApplyAdam"
  input: "^cost-node/Adam/update_conv_1/batch_normalization_1/beta/ApplyAdam"
  input: "^cost-node/Adam/update_conv_1/batch_normalization_1/gamma/ApplyAdam"
  input: "^cost-node/Adam/update_conv_2/batch_normalization_1/beta/ApplyAdam"
  input: "^cost-node/Adam/update_conv_2/batch_normalization_1/gamma/ApplyAdam"
  input: "^cost-node/Adam/Assign"
  input: "^cost-node/Adam/Assign_1"
}
node {
  name: "cost-node/cost/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "cost-node/cost"
      }
    }
  }
}
node {
  name: "cost-node/cost"
  op: "ScalarSummary"
  input: "cost-node/cost/tags"
  input: "cost-node/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "accuracy-node/mul"
  op: "Mul"
  input: "input/yin"
  input: "accuracy-node/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Round"
  op: "Round"
  input: "accuracy-node/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/div/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "accuracy-node/div"
  op: "RealDiv"
  input: "accuracy-node/Round"
  input: "accuracy-node/div/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "accuracy-node/mul_1"
  op: "Mul"
  input: "output"
  input: "accuracy-node/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Round_1"
  op: "Round"
  input: "accuracy-node/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/div_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "accuracy-node/div_1"
  op: "RealDiv"
  input: "accuracy-node/Round_1"
  input: "accuracy-node/div_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Equal"
  op: "Equal"
  input: "accuracy-node/div"
  input: "accuracy-node/div_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Cast"
  op: "Cast"
  input: "accuracy-node/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "accuracy-node/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy-node/Mean"
  op: "Mean"
  input: "accuracy-node/Cast"
  input: "accuracy-node/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy-node/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "accuracy-node/mul_2"
  op: "Mul"
  input: "accuracy-node/mul_2/x"
  input: "input/yin"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "accuracy-node/add"
  op: "Add"
  input: "accuracy-node/mul_2"
  input: "accuracy-node/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Round_2"
  op: "Round"
  input: "accuracy-node/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "accuracy-node/mul_3"
  op: "Mul"
  input: "accuracy-node/mul_3/x"
  input: "output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "accuracy-node/add_1"
  op: "Add"
  input: "accuracy-node/mul_3"
  input: "accuracy-node/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Round_3"
  op: "Round"
  input: "accuracy-node/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Equal_1"
  op: "Equal"
  input: "accuracy-node/Round_2"
  input: "accuracy-node/Round_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/Cast_1"
  op: "Cast"
  input: "accuracy-node/Equal_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "accuracy-node/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy-node/Mean_1"
  op: "Mean"
  input: "accuracy-node/Cast_1"
  input: "accuracy-node/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy-node/accuracy/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy-node/accuracy"
      }
    }
  }
}
node {
  name: "accuracy-node/accuracy"
  op: "ScalarSummary"
  input: "accuracy-node/accuracy/tags"
  input: "accuracy-node/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy-node/accuracy_weak/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy-node/accuracy_weak"
      }
    }
  }
}
node {
  name: "accuracy-node/accuracy_weak"
  op: "ScalarSummary"
  input: "accuracy-node/accuracy_weak/tags"
  input: "accuracy-node/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wc1_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "wc1_0"
      }
    }
  }
}
node {
  name: "wc1_0"
  op: "HistogramSummary"
  input: "wc1_0/tag"
  input: "wc1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wc2_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "wc2_0"
      }
    }
  }
}
node {
  name: "wc2_0"
  op: "HistogramSummary"
  input: "wc2_0/tag"
  input: "wc2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wd1_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "wd1_0"
      }
    }
  }
}
node {
  name: "wd1_0"
  op: "HistogramSummary"
  input: "wd1_0/tag"
  input: "wd1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "wout_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "wout_0"
      }
    }
  }
}
node {
  name: "wout_0"
  op: "HistogramSummary"
  input: "wout_0/tag"
  input: "wout/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bc1_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "bc1_0"
      }
    }
  }
}
node {
  name: "bc1_0"
  op: "HistogramSummary"
  input: "bc1_0/tag"
  input: "bc1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bc2_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "bc2_0"
      }
    }
  }
}
node {
  name: "bc2_0"
  op: "HistogramSummary"
  input: "bc2_0/tag"
  input: "bc2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bd1_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "bd1_0"
      }
    }
  }
}
node {
  name: "bd1_0"
  op: "HistogramSummary"
  input: "bd1_0/tag"
  input: "bd1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bout_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "bout_0"
      }
    }
  }
}
node {
  name: "bout_0"
  op: "HistogramSummary"
  input: "bout_0/tag"
  input: "bout/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/beta_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_1/batch_normalization/beta_0"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/beta_0"
  op: "HistogramSummary"
  input: "conv_1/batch_normalization/beta_0/tag"
  input: "conv_1/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization/gamma_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_1/batch_normalization/gamma_0"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization/gamma_0"
  op: "HistogramSummary"
  input: "conv_1/batch_normalization/gamma_0/tag"
  input: "conv_1/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_1/batch_normalization_1/beta_0"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/beta_0"
  op: "HistogramSummary"
  input: "conv_1/batch_normalization_1/beta_0/tag"
  input: "conv_1/batch_normalization_1/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_1/batch_normalization_1/gamma_0"
      }
    }
  }
}
node {
  name: "conv_1/batch_normalization_1/gamma_0"
  op: "HistogramSummary"
  input: "conv_1/batch_normalization_1/gamma_0/tag"
  input: "conv_1/batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/beta_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_2/batch_normalization/beta_0"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/beta_0"
  op: "HistogramSummary"
  input: "conv_2/batch_normalization/beta_0/tag"
  input: "conv_2/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization/gamma_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_2/batch_normalization/gamma_0"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization/gamma_0"
  op: "HistogramSummary"
  input: "conv_2/batch_normalization/gamma_0/tag"
  input: "conv_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_2/batch_normalization_1/beta_0"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/beta_0"
  op: "HistogramSummary"
  input: "conv_2/batch_normalization_1/beta_0/tag"
  input: "conv_2/batch_normalization_1/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "conv_2/batch_normalization_1/gamma_0"
      }
    }
  }
}
node {
  name: "conv_2/batch_normalization_1/gamma_0"
  op: "HistogramSummary"
  input: "conv_2/batch_normalization_1/gamma_0/tag"
  input: "conv_2/batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "cost-node/cost"
  input: "accuracy-node/accuracy"
  input: "accuracy-node/accuracy_weak"
  input: "wc1_0"
  input: "wc2_0"
  input: "wd1_0"
  input: "wout_0"
  input: "bc1_0"
  input: "bc2_0"
  input: "bd1_0"
  input: "bout_0"
  input: "conv_1/batch_normalization/beta_0"
  input: "conv_1/batch_normalization/gamma_0"
  input: "conv_1/batch_normalization_1/beta_0"
  input: "conv_1/batch_normalization_1/gamma_0"
  input: "conv_2/batch_normalization/beta_0"
  input: "conv_2/batch_normalization/gamma_0"
  input: "conv_2/batch_normalization_1/beta_0"
  input: "conv_2/batch_normalization_1/gamma_0"
  attr {
    key: "N"
    value {
      i: 19
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^wc1/Assign"
  input: "^wc2/Assign"
  input: "^wd1/Assign"
  input: "^wout/Assign"
  input: "^bc1/Assign"
  input: "^bc2/Assign"
  input: "^bd1/Assign"
  input: "^bout/Assign"
  input: "^conv_1/batch_normalization/beta/Assign"
  input: "^conv_1/batch_normalization/gamma/Assign"
  input: "^conv_1/batch_normalization/moving_mean/Assign"
  input: "^conv_1/batch_normalization/moving_variance/Assign"
  input: "^conv_1/batch_normalization_1/beta/Assign"
  input: "^conv_1/batch_normalization_1/gamma/Assign"
  input: "^conv_1/batch_normalization_1/moving_mean/Assign"
  input: "^conv_1/batch_normalization_1/moving_variance/Assign"
  input: "^conv_2/batch_normalization/beta/Assign"
  input: "^conv_2/batch_normalization/gamma/Assign"
  input: "^conv_2/batch_normalization/moving_mean/Assign"
  input: "^conv_2/batch_normalization/moving_variance/Assign"
  input: "^conv_2/batch_normalization_1/beta/Assign"
  input: "^conv_2/batch_normalization_1/gamma/Assign"
  input: "^conv_2/batch_normalization_1/moving_mean/Assign"
  input: "^conv_2/batch_normalization_1/moving_variance/Assign"
  input: "^cost-node/beta1_power/Assign"
  input: "^cost-node/beta2_power/Assign"
  input: "^wc1/Adam/Assign"
  input: "^wc1/Adam_1/Assign"
  input: "^wc2/Adam/Assign"
  input: "^wc2/Adam_1/Assign"
  input: "^wd1/Adam/Assign"
  input: "^wd1/Adam_1/Assign"
  input: "^wout/Adam/Assign"
  input: "^wout/Adam_1/Assign"
  input: "^bc1/Adam/Assign"
  input: "^bc1/Adam_1/Assign"
  input: "^bc2/Adam/Assign"
  input: "^bc2/Adam_1/Assign"
  input: "^bd1/Adam/Assign"
  input: "^bd1/Adam_1/Assign"
  input: "^bout/Adam/Assign"
  input: "^bout/Adam_1/Assign"
  input: "^conv_1/batch_normalization_1/beta/Adam/Assign"
  input: "^conv_1/batch_normalization_1/beta/Adam_1/Assign"
  input: "^conv_1/batch_normalization_1/gamma/Adam/Assign"
  input: "^conv_1/batch_normalization_1/gamma/Adam_1/Assign"
  input: "^conv_2/batch_normalization_1/beta/Adam/Assign"
  input: "^conv_2/batch_normalization_1/beta/Adam_1/Assign"
  input: "^conv_2/batch_normalization_1/gamma/Adam/Assign"
  input: "^conv_2/batch_normalization_1/gamma/Adam_1/Assign"
}
versions {
  producer: 24
}
